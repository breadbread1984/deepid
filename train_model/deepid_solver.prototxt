#训练样本416086，测试样本21150
net: "deepid.prototxt"
# 测试多少iteration恢复训练，test_iter = 测试样本个数 / batch_size，也就是 。
test_iter: 166
# 训练多少iteration开始测试，test_interval=训练样本个数/batch_size，也就是整个训练集过一遍开始测试。
test_interval: 7135
# 更新权重时候，原权重的比例
momentum: 0.9
# 防止过拟合的权重范数惩罚权重
weight_decay: 0.0005
# The learning rate decay policy. The currently implemented learning rate
# policies are as follows:
#    - fixed: always return base_lr.
#    - step: return base_lr * gamma ^ (floor(iter / step))
#    - exp: return base_lr * gamma ^ iter
#    - inv: return base_lr * (1 + gamma * iter) ^ (- power)
#    - multistep: similar to step but it allows non uniform steps defined by
#      stepvalue
#    - poly: the effective learning rate follows a polynomial decay, to be
#      zero by the max_iter. return base_lr (1 - iter/max_iter) ^ (power)
#    - sigmoid: the effective learning rate follows a sigmod decay
#      return base_lr ( 1/(1 + exp(-gamma * (iter - stepsize))))
#
# where base_lr, max_iter, gamma, step, stepvalue and power are defined
# in the solver parameter protocol buffer, and iter is the current iteration.
lr_policy: "step"
base_lr: 0.001
gamma: 0.95
#step_size = n x (训练样本个数/batch_size)也就是所有样本过n次就降低lr。n=20
stepsize: 713500
# max_iter * batch_size =  200 × 训练样本数量
max_iter: 142700000
display: 200
# 权重快照保存的间隔snapshot=训练样本数/batch_size
snapshot: 713500
snapshot_prefix: "deepid"
solver_mode: GPU
 
